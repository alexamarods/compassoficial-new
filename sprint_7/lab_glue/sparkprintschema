<<<<<<< HEAD
import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from pyspark.sql import Row

## @params: [JOB_NAME]
args = getResolvedOptions(sys.argv, ['JOB_NAME', 'S3_INPUT_PATH', 'S3_TARGET_PATH'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Lendo os dados de S3
dynamic_frame = glueContext.create_dynamic_frame.from_options(
    connection_type="s3",
    connection_options={"paths": [args['S3_INPUT_PATH']], "recurse":True}, 
    format="csv", 
    format_options={"withHeader": True, "delimiter": ","}
)

# Convertendo o DynamicFrame para DataFrame para manipulação mais fácil
data_frame = dynamic_frame.toDF()

# Imprimindo o esquema do DataFrame
data_frame.printSchema()

=======
import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from pyspark.sql import Row

## @params: [JOB_NAME]
args = getResolvedOptions(sys.argv, ['JOB_NAME', 'S3_INPUT_PATH', 'S3_TARGET_PATH'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Lendo os dados de S3
dynamic_frame = glueContext.create_dynamic_frame.from_options(
    connection_type="s3",
    connection_options={"paths": [args['S3_INPUT_PATH']], "recurse":True}, 
    format="csv", 
    format_options={"withHeader": True, "delimiter": ","}
)

# Convertendo o DynamicFrame para DataFrame para manipulação mais fácil
data_frame = dynamic_frame.toDF()

# Imprimindo o esquema do DataFrame
data_frame.printSchema()

>>>>>>> 68b468ab0d6fa2593f748e4564902c3c148f32c6
job.commit()